# using Conventional Commit
# <type>[optional scope]: <description>

# [optional body]

# [optional footer(s)
# Reviewed-by: <reviewer>
# Ref: <issue-id>

# 50-character subject line
# 72-character wrapped longer description.
#
# Possible types:
# 1. fix: Patches a bug
# 2. feat: Introduces a new feature
# 3. chore: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
# 4. ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs) 
# 5. docs: Documentation only changes
# 7. style: Changes that do not affect the meaning of the code (white-space, formatting, missing semicolons, etc)
# 8. refactor: A code change that neither fixes a bug nor adds a feature
# 9. perf:  A code change that improves performance
# 10. test: Adding missing tests or correcting existing tests
#
# Example
# 1. Commit message with description and breaking change footer 
#    ````
#    feat: allow provided config object to extend other configs
# 
#    BREAKING CHANGE: `extends` key in config file is now used for extending other config files
#    ````
# 2. Commit message with multi-paragraph body and multiple footers
#    ```
#    fix: prevent racing of requests
#    
#    Introduce a request id and a reference to the latest request. Dismiss
#    incoming responses other than from the latest request.
#    
#    Remove timeouts which were used to mitigate the racing issue but are
#    obsolete now.
#    
#    Reviewed-by: Z
#    Refs: #123
#    ```

